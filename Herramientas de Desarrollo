#Herramientas de desarrollo
###Introducción
**1. ¿Para que sirve un compilador? ¿Qué tipo de archivo obtenemos tras compilar?**

Un compilador es un programa informático que traduce un programa que ha sido escrito en un lenguaje de programación a un lenguaje diferente, usualmente lenguaje de máquina, aunque también puede ser traducido a un código intermedio (bytecode) o a texto. Tras compilar se crea un archivo ejecutable, que su extensión depende del programa en el cual haya sido programado, por ejemplo si esta programado en Java será .class o si es en C su extensión será .c .

http://www.programa-me.com/documents/GuiaCompilacionCLI.pdf
https://brainly.lat/tarea/5177532#readmore

**2.¿Para que sirve un enlazador? ¿Qué tipo de archivo obtenemos tras enlazar?**

Un enlazador es un programa que toma los objetos hechos en los primeros pasos del proceso de compilación, la información de todos los recursos necesarios como en la biblioteca, quita aquellos recursos que no se necesita, y enlaza el código objeto con su biblioteca con lo que finalmente produce un fichero ejecutable. En el caso de los programas enlazados dinámicamente, el enlace entre el programa ejecutable y las bibliotecas se realiza en tiempo de carga o ejecución del programa. Existen programas que se enlazan en el momento en el que se carga el programa. Tras enlazar lo que obtenemos son archivos ejecutables.

https://sites.google.com/site/informaticaactualysencilla/software/enlazadores

**3.¿Para que sirve un interprete? ¿Obtenemos algún archivo tras interpretar?**
En ciencias de la computación, intérprete o interpretador es un programa informático capaz de analizar y ejecutar otros programas. El intérprete no crea ningún archivo simplemente intrepreta un archivo a lenguaje máquina.

http://www.cavsi.com/preguntasrespuestas/que-es-un-interprete/

**4.Explica cada uno de los siguientes conceptos e indica la relación entre ellos.**

- Código fuente, es un conjunto de líneas de texto con los pasos que debe seguir la computadora para ejecutar dicho programa. 
- Código objeto, código que resulta de la compilación del código fuente.​ Puede ser en lenguaje máquina o bytecode, y puede distribuirse en varios archivos que corresponden a cada código fuente compilado. Luego un enlazador (linker) se encarga de juntar todos los archivos de código objeto para obtener el programa ejecutable
- Código binario,es el sistema numérico usado para la representación de textos, o procesadores de instrucciones de computadora, utilizando el sistema binario(ceros y unos). 
Todos estos códigos están relacionados entre sí, a través del código fuente que es el que programamos y con ayuda del compilador obtenemos el codigo objeto  que con un enlazador obtenemos el ejecutable del programa. Ese código objeto tiene un código binario que es el que el ordenador entiene y hace funcionar el programa.

**5.¿Qué tipo de código es el bytecode generado por el compilador de Java?**
El bytecode un código intermedio más abstracto que el código máquina. Habitualmente es tratado como un archivo binario que contiene un programa ejecutable similar a un módulo objeto, que es un archivo binario producido por el compilador cuyo contenido es el código objeto o código máquina.

http://unidad2-dispositivosmoviles.blogspot.com/2017/03/bytecode-java.html

###Herramientas de Desarrollo

**1. Ejecuta el programa "Hola mundo" en los siguientes lenguajes:**

   bash
    python
    php
    javascript (nodejs)
    c
    c++
    java
    ruby
    go
    rust
    lisp
    ensamblador (nasm)

**2. Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el código: ¿compilación o interpretación?**

   bash: interpretado
   python: interpretado
   php: interpretado
   javascript (nodejs): interpretado
   c: compilado
   c++: compilado
   java: compilado
   ruby: interpretado
   go: compilado
   rust: compilado
   lisp: interpretado
   ensamblador (nasm):compilado
   
   **3. Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux.**

   bash: terminal
    python: python
    php: php
    javascript (nodejs): node
    c: gcc
    c++: g++
    java: javac
    ruby: ruby
    go: go
    rust: rustc
    lisp: clisp
    ensamblador (nasm): nasm

**4. Investiga y averigua que extensión tienen los archivos de código fuente de los siguientes lenguajes.** 

   bash: .sh
    python: .py
    php: .php
    javascript (nodejs): .js
    c: .c
    c++: .cpp
    java: .java
    ruby: .rb
    go: .go
    rust: .rs
    lisp: .lisp
    ensamblador (nasm): .asm
    
**5. Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguajes.**

**bash:** 
***Script ejecutable***
   1. Editamos archivo hola.sh
	#!/usr/bin/env bash
	echo "Hola mundo"
    2. Damos permisos de ejecución
	chmod  +x  hola.sh
   3. Ejecutamos
	./hola.sh

**python**
***Scrip ejecutable***
   1. Editamos archivo hola.py
	#!/usr/bin/env python
	print "Hola mundo"
    2. Damos permisos de ejecución
	chmod  +x  hola.py
    3. Ejecutamos
	./hola.py

**php**
***Scrip ejecutable***
   1.Editamos archivo hola.php
	#!/usr/bin/env php
	<?php 
	  echo "Hola mundo\n" 
	?>
    2.Damos permisos de ejecución
	chmod  +x  hola.php
    3.Ejecutamos
	./hola.php
	
**javascript (nodejs)**
***Scrip ejecutable***
    1. Editamos archivo hola.js
	#!/usr/bin/env node
	console.log('Hola mundo');
    2. Damos permisos de ejecución
	chmod  +x  hola.js
    3. Ejecutamos
	./hola.js
	
**java**
***Scrip ejecutable***
    1. Empaquetamos
	jar  cvfe  hola.jar  Hola  Hola.class
   2.  Damos permiso de ejecución
	chmod  +x  hola.jar
    3. Ejecutamos
	./hola.jar

**ruby**
***Scrip ejecutable***
    1. Editamos archivo hola.rb
	#!/usr/bin/env ruby
	puts "Hola Mundo"
    2. Damos permisos de ejecución
	chmod  +x  hola.rb
    3. Ejecutamos
	./hola.rb

**lisp**
***Script ejecutable***
    1. Editamos archivo hola.lisp
	#!/usr/bin/env clisp
	(format t "¡Hola, mundo!")
    2. Damos permisos de ejecución
	chmod  +x  hola.lisp
    3. Ejecutamos
	./hola.lisp

**6. ¿Qué extensión tienen los archivos de código objeto?**
La extensión del código objeto cambia según el lenguaje, por ejemplo en c su extensión es .o.

**7. Lenguaje C. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes**

**8. Lenguaje C. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores**

**9. Lenguaje C++. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes**

**10. Lenguaje C++. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores**

**11. Bibliotecas. Define que se entiende por biblioteca o librería y los tipos que existen.**
En informática, una biblioteca o, llamada por vicio del lenguaje librería (del inglés library) es un conjunto de implementaciones funcionales, codificadas en un lenguaje de programación, que ofrece una interfaz bien definida para la funcionalidad que se invoca. Hay tres tipos de bibliotecas:
- Bibliotecas dinámicas
- Bibliotecas estáticas
- Bibliotecas remotas

**12. Bibliotecas. ¿Qué tipo es el más utilizado actualmente? ¿Por qué?**
 Actualmente las bibliotecas mas utilizadas son las bibliotecas dinámicas porque el programa tiene menor tamaño y el programa siempre esta actulaizado respecto a la biblioteca, sus desventajas son que el programa no esta autocontenido y las actualizaciones le pueden afectar tanto para bien como para mal.
 
 **13. Bibliotecas. Crea una biblioteca dinámica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.**

**14. Bibliotecas. Crea una biblioteca dinámica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.**

**15. Bibliotecas. Busca información y explica las ventajas y desventajas de usar bibliotecas estáticas.**
**Ventajas:**
Programa autocontenido.
Las actualizaciones de la biblioteca no le afectan.

**Desventajas:**
Mayor tamaño del programa.
El programa no se beneficia de las actualizaciones de la biblioteca.

**16.Bibliotecas. Busca información y explica las ventajas y desventajas de usar bibliotecas dinámicas.**
**Ventajas:**
Menor tamaño del programa.
El programa se beneficia de las actualizaciones de la biblioteca.

**Desventajas:**
Programa no autocontenido.
Las actualizaciones de la biblioteca le afectan para bien y para mal.

**17. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo ejecutable para código fuente en C con make. Haz uso de un buildfile.**

**18. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Ant. Haz uso de un buildfile.**

**19. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Maven. Haz uso de un buildfile.**

**20. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Gradle. Haz uso de un buildfile.**

**21. CMake. Automatiza el proceso de compilación de ejecutable y bibliotecas, su enlazado y la generación del archivo ejecutable para código fuente en C++. Crea un buildfile con CMake.**

